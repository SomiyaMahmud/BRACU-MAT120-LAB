# -*- coding: utf-8 -*-
"""Sotution of Practice Problem Set.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KpDVN7UtjMMy8uh5w2ot0peIL67J0Puu
"""

import numpy as np
from matplotlib.pyplot import *
from math import sin, cos, pi
from sympy import *
x, y, z, a, b, c = symbols('x y z a b c')

"""np.arage(start,stop,step,type)

step,type =optional
"""

a=np.arange(1,11)
print(a)

"""np.linspace(start,stop,num,endpoint, retstep,type)

**num**=number of required value in array

optional

 default=50

 **endpoin**t=true:stop idx will be include

false: stop idx will not be include

optional

 defaule=True


"""

c= np.linspace(0,11,5)
print(c)

c= np.linspace(0,11)
print(c)

#1
x=np.linspace(-2,3,20) #interval
def f(x):
    return 2*x**3 - 6*x**2 + 2*x + 1

def f_prime(x):
    return 6*x**2 - 12*x + 2
y1=f(x)
y2=f_prime(x)
plot(x,y1,'r',label='f(x)')
plot(x,y2,'b',label="f'(x)")
legend()
xlabel('x-->')
ylabel('y-->')
grid()
title('f(x) & f"(x)')
show()

#2a(Plot, Find the maxima and minima in this range.)
x=np.linspace(-5,5,20) #interval
y=2*x**3 - 6*x**2 + 2*x + 1
from matplotlib.pyplot import *
plot(x,y)
xlabel('x-->')
ylabel('y-->')
grid()
show()

#3(projectile)
a = 0
b = 0.8
N = 1001
h = (b-a)/(N-1)
t = linspace(a,b,N)
x = 0* t
y = 0* t

for i in range(1,N):
  x[i] = x[i-1] + h* (3)
  y[i] = y[i-1] + h*(4-10*t[i-1])
plot(x,y)
grid()

#4a
x = symbols('x')
f = exp(-x)*(x**2)*cos(x)
integrate(f)

#4b
x = symbols('x')
f = sqrt(x**2 - 16) / x
integrate(f)

#4c
x = symbols('x')
numerator = x**2 + x - 2
denominator = 3*x**3 - x**2 + 3*x - 1
f= numerator / denominator
integrate(f)

#5
import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint

# Step 2: Define the differential equation and parameters
def damped_oscillation(xv, t, gamma):
    x, v = xv
    dxdt = v
    dvdt = -2*gamma*v - x
    return [dxdt, dvdt]

t = np.linspace(0, 20, 1000)  # Time points

# Step 3: Solve the differential equation for different values of gamma
gammas = [0, 0.5, 1, 2]
solutions = []

for gamma in gammas:
    solution = odeint(damped_oscillation, [1, 0], t, args=(gamma,))
    solutions.append(solution[:, 0])  # Extract x component

# Step 4: Create subplots to plot x vs t for each value of gamma
plt.figure(figsize=(12, 8))

for i, gamma in enumerate(gammas):
    plt.subplot(2, 2, i+1)
    plt.plot(t, solutions[i], label=f'$\gamma = {gamma}$')
    plt.xlabel('Time $t$')
    plt.ylabel('Displacement $x(t)$')
    plt.title(f'Damped Oscillation for $\gamma = {gamma}$')
    plt.legend()

plt.tight_layout()
plt.show()

#6a
integrate(sin(x)/x, (x,-oo,oo))

integrate(sin(x)/x, (x,-oo,oo)).evalf()

#6b
numerator = x**3
denominator = sqrt(1 - x**3)

integrate(numerator / denominator,(x,0,1))

#6c
integrate(ln(x) / (x**2 + a**2),(x,0,oo))

#7a
def f(y):
  if y==0:
    return 1
  else:
    return y**y
a = 0 #lower limit
b = 1  #upper limit
n = 100
h = (b-a)/n
s = 0

for i in range(n):
  s = s + f(a+ i*h)*h
print(s)
print(round(s,3))

#7b
from math import sin, cos, pi
def f(x):
  return x*sin(x)

a = 0 #lower limit
b = pi  #upper limit
n = 1000
h = (b-a)/n
s = 0

for i in range(n):
  s = s + f(a+ i*h)*h
print(round(s,3))

#7c
from math import sin, cos, pi
def f(x):
    return sin(x**2)

a = 0
b = 2000
h = 0.0001
n = int((b-a)/h)
s = 0

for i in range(1,n+1):
  s = s + f(a+ i*h)*h
print(round(s,3))

#8

from sympy import *

v, t = symbols('v t')

v= Function("v")(t)
expr = Eq(diff(v,t), 10 - v**2)
boundary = {v.subs(t,0): 5}
dsolve(expr, ics = boundary)