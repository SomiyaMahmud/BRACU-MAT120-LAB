# -*- coding: utf-8 -*-
"""Lab 02.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KSCSq_1-21n8wB8GMBeqfDoD1SsfaJsS

# Importing Library Functions
"""

from math import sin, cos, pi

"""$$ f'(a) = \lim_{h \to 0} \frac{f(a+h)-f(a)}{h} $$
For more accurate value of derivative, we should choose smaller h.
"""

h = -0.001
x= pi/6
y = (sin(x+h)-sin(x))/h
print(f"Numerically={y}, actual= {cos(x)}")

# We need accuracy upto 4 decimal points
x = float(input("At which point you want to differentiate sin(x)? x: "))
n = 4 # correct upto 4 decimal points
t= 10**(-n) # tolerance
h = 1.0; #start
val = 2 # random but should be outside [-1,1]

while True:
  y = (sin(x+h)-sin(x))/h
  if (abs(y-val)<=t):
    print(f"Derivative at x={x}  upto {n} decimal point is {y:+.4f} ")
    break
  else:
    h = h/10
    val = y
print(f"Actual value is {cos(x)}")

"""# Introduction to Matplotlib
### (and numpy)
"""

import matplotlib.pyplot as plt

import numpy as np

x= np.arange(5)
y= np.array([0, 2, 4, 6, 8])
print(x)
print(y)

plt.plot(x,y)

plt.plot(x,y)
plt.xlabel("X axis")
plt.ylabel("y axis")
plt.xticks([0,1,2,3,4])
plt.yticks([0,2,4,6,8])

z = np.power(x,2)
plt.plot(x,y, label = "2x")
plt.plot(x, z, label = "x^2")
plt.xlabel("X axis")
plt.ylabel("y axis")
plt.xticks([0,1,2,3,4])

plt.legend()
plt.show()

x= np.linspace(0, 4*pi, 200)
y1= np.sin(x)
y2= np.cos(x)
plt.title('Sine & cosine')
plt.plot(x, y1, color='r', label='sin')
plt.plot(x, y2, color='g', label='cos')
plt.xticks(np.arange(13))
plt.legend()
plt.grid()
plt.show()

y3 = np.tan(x)
y4 = np.sqrt(x)

# Initialise the subplot function using number of rows and columns
figure, axis = plt.subplots(2, 2)

# For Sine Function
axis[0, 0].plot(x, y1)
axis[0, 0].set_title("sin")

# For Cosine Function
axis[0, 1].plot(x, y2)
axis[0, 1].set_title("cos")

# For Tangent Function
axis[1, 0].plot(x, y3)
axis[1, 0].set_title("tan")

# For Tanh Function
axis[1, 1].plot(x, y4)
axis[1, 1].set_title("sqrt")

plt.tight_layout()
plt.show()

from math import gamma

x= [0.03*i for i in range(101)]
z1 = [gamma(i+1) for i in x]
h = 0.0001
z2 = [(gamma(i+1)-gamma(i+1-h))/h for i in x]

plt.plot(x,z1, 'r', label = "factorial(n)")
plt.plot(x, z2, 'b', label= "derivative")
plt.legend()
plt.xlabel("n --> ")
plt.xticks(np.linspace(0,3,13))
plt.grid()

plt.show()

"""# Introduction to Sympy"""

from sympy import*
a,b,c = symbols('a,b,c')

g = a**2/2 + 3*b - c/a
print("g(a,b,c) =", g)

init_printing(pretty_print=True)

g = a**2/2 + 3*b - c/a
expand(g)

print(sqrt(12))
print(Rational(0.3))
print(Float(pi,6))

x = Symbol('x')
f = x**2 + x + 1
print(f)
print(f.subs(x,3.1416)) #this substitutes a value in place of x
h = f.subs(x,a) #this substitutes another symbol 'a' in place of x
print(h)

t = sin(b)**2 + 3*cos(b) + tan(b)
print(t.subs(b,3))
print((t.subs(b,3)).evalf())

print(f.evalf(6, subs={x:3.1416})) #here evalf evaluates the function for given value upto any precision. evalf(precision, subs={symbol:value})

pi.evalf(100)

x,y,z = symbols('x,y,z')
expr = x**3 + 4*x*y - z
print(expr)
expr.subs([(x, 2), (y, 4), (z, 0)])

c1= a+b
c2= a-b
print(c1*c2)
print(expand(c1*c2))

print(Integral(sqrt(1/x), x))
pprint(Integral(sqrt(1/x), x))

init_printing(pretty_print=True)

Integral(sqrt(1/x), x)

(x+1)**2 == x**2 + 2*x + 1

((x+1)**2).equals(x**2 + 2*x + 1)

simplify((x + 1)**2-(x**2 - 2*x + 1))

expr1 = sin(3*x)
expr2= expand_trig(expr1)
Eq(expr1,expr2)

expr = x**2 - 5*x + 6
factor(expr)

print(asin(1))
print(sin(pi/3))

a = np.arange(10)
expr = input()
f = lambdify(x, expr, "numpy")
f(a)

"""## Calculus Calculation"""

diff(exp(x**2), x)

diff(cos(x), x, 1) # The number idicates order of derivative

integrate(tan(x), x)

solve(x**2 - 2, x)

plot(tanh(x))

plot( sin(x),cos(x), (x, -pi, pi))

plot( (sin(x),(x, -pi, pi)),(cos(x), (x, -pi, pi)))

from sympy.plotting import plot3d
plot3d(x*y, (x, -10,10), (y, -10,10))